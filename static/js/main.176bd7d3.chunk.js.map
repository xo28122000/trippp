{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","isopenNav","start","R","G","B","A","speed","instruction","sleep","seconds","Promise","resolve","setTimeout","componentDidMount","document","getElementById","value","getElementsByClassName","addEventListener","e","a","setState","Math","random","onclick","id","className","style","backgroundColor","this","Navbar","light","expand","background","NavbarBrand","NavbarToggler","onClick","Collapse","isOpen","navbar","Nav","NavItem","NavLink","href","class","textAlign","paddingTop","htmlFor","type","min","max","step","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+UAiJeA,E,2MApIbC,MAAQ,CACNC,WAAW,EACXC,OAAO,EACPC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,GACHC,MAAO,EACPC,YAAa,2B,EAEfC,MAAQ,SAAAC,GACN,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAAmB,GAAVF,O,EAEpDI,kBAAoB,WAClBC,SAASC,eAAe,oBAAoBC,MAAQ,EACpDF,SACGG,uBAAuB,eAAe,GACtCC,iBAAiB,QAFpB,uCAE6B,WAAMC,GAAN,SAAAC,EAAA,yDACpB,EAAKrB,MAAME,MADS,iBAEvB,EAAKoB,SAAS,CACZpB,OAAO,EACPM,YAAa,4BAJQ,WAMhB,EAAKR,MAAME,MANK,uBAOrB,EAAKoB,SAAS,CACZnB,EAAmB,IAAhBoB,KAAKC,SACRpB,EAAmB,IAAhBmB,KAAKC,SACRnB,EAAmB,IAAhBkB,KAAKC,SACRlB,EAAGiB,KAAKC,WAXW,SAaf,EAAKf,MAAM,EAAKT,MAAMO,OAbP,qDAgBvB,EAAKe,SAAS,CACZpB,OAAO,EACPM,YAAa,6BAlBQ,4CAF7B,wD,wEAyBQ,IAAD,OACPO,SAASU,QAAT,uCAAmB,WAAML,GAAN,SAAAC,EAAA,0FAAnB,sDAcA,OACE,yBAAKK,GAAG,QACN,yBACEC,UAAU,cACVC,MAAO,CACLC,gBACE,QACAC,KAAK9B,MAAMG,EACX,IACA2B,KAAK9B,MAAMI,EACX,IACA0B,KAAK9B,MAAMK,EACX,IACAyB,KAAK9B,MAAMM,EACX,MAGJ,yBAAKoB,GAAG,UACN,kBAACK,EAAA,EAAD,CAEEC,OAAK,EACLC,OAAO,KACPL,MAAO,CAAEM,WAAY,0BAErB,kBAACC,EAAA,EAAD,eACA,kBAACC,EAAA,EAAD,CAAeC,QA5BP,WAChB,EAAKf,SAAS,CAAErB,WAAY,EAAKD,MAAMC,eA4B/B,kBAACqC,EAAA,EAAD,CAAUC,OAAQT,KAAK9B,MAAMC,UAAWuC,QAAM,GAC5C,kBAACC,EAAA,EAAD,CAAKd,UAAU,UAAUa,QAAM,GAC7B,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,KAAd,SAGF,kBAACF,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,KAAK,2CAAd,kBASV,yBAAKlB,GAAG,UAEV,yBACEA,GAAG,SACHC,UAAU,yBACVC,MAAO,CAAEM,WAAY,0BAErB,yBAAKW,MAAM,QAAQjB,MAAO,CAAEkB,UAAW,WACrC,yBAAKnB,UAAU,kBAAkBC,MAAO,CAAEmB,WAAY,SACnDjB,KAAK9B,MAAMQ,cAGhB,yBAAKqC,MAAM,SACT,yBAAKlB,UAAU,mBACb,6BAEA,2BAAOqB,QAAQ,oBAAf,UACA,2BACEC,KAAK,QACLtB,UAAU,+BACVD,GAAG,mBACHwB,IAAI,IACJC,IAAI,KACJC,KAAK,MACLC,SA/ES,WACnB,EAAK/B,SAAS,CACZf,MAAOQ,SAASC,eAAe,oBAAoBC,aAiFjD,yBAAK4B,MAAM,e,GA9HHS,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAS9C,SAASC,eAAe,SD8H3C,kBAAmB8C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.176bd7d3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink\n} from \"reactstrap\";\n\nclass App extends Component {\n  state = {\n    isopenNav: false,\n    start: false,\n    R: 0,\n    G: 0,\n    B: 0,\n    A: 0.9,\n    speed: 2,\n    instruction: \"Click anywhere to start\"\n  };\n  sleep = seconds => {\n    return new Promise(resolve => setTimeout(resolve, seconds * 60));\n  };\n  componentDidMount = () => {\n    document.getElementById(\"formControlRange\").value = 2;\n    document\n      .getElementsByClassName(\"colorChange\")[0]\n      .addEventListener(\"click\", async e => {\n        if (!this.state.start) {\n          this.setState({\n            start: true,\n            instruction: \"Click anywhere to stop.\"\n          });\n          while (this.state.start) {\n            this.setState({\n              R: Math.random() * 256,\n              G: Math.random() * 256,\n              B: Math.random() * 256,\n              A: Math.random()\n            });\n            await this.sleep(this.state.speed);\n          }\n        } else {\n          this.setState({\n            start: false,\n            instruction: \"Click anywhere to start.\"\n          });\n        }\n      });\n  };\n  render() {\n    document.onclick = async e => {};\n    const sliderChange = () => {\n      this.setState({\n        speed: document.getElementById(\"formControlRange\").value\n      });\n    };\n\n    // const innerClicked = event => {\n    //   console.log(\"inner here\");\n    //   event.stopPropagation();\n    // };\n    const toggleNav = () => {\n      this.setState({ isopenNav: !this.state.isopenNav });\n    };\n    return (\n      <div id=\"Root\">\n        <div\n          className=\"colorChange\"\n          style={{\n            backgroundColor:\n              \"RGBA(\" +\n              this.state.R +\n              \",\" +\n              this.state.G +\n              \",\" +\n              this.state.B +\n              \",\" +\n              this.state.A +\n              \")\"\n          }}\n        >\n          <div id=\"NavBar\">\n            <Navbar\n              // color=\"#ffffff\"\n              light\n              expand=\"md\"\n              style={{ background: \"RGBA(255,255,255,0.3)\" }}\n            >\n              <NavbarBrand>Colors</NavbarBrand>\n              <NavbarToggler onClick={toggleNav} />\n              <Collapse isOpen={this.state.isopenNav} navbar>\n                <Nav className=\"mr-auto\" navbar>\n                  <NavItem>\n                    <NavLink href=\"#\">Home</NavLink>\n                  </NavItem>\n\n                  <NavItem>\n                    <NavLink href=\"https://xo28122000.github.io/portfolio/\">\n                      Portfolio\n                    </NavLink>\n                  </NavItem>\n                </Nav>\n              </Collapse>\n            </Navbar>\n          </div>\n\n          <div id=\"main\"></div>\n        </div>\n        <div\n          id=\"footer\"\n          className=\"row align-items-center\"\n          style={{ background: \"RGBA(255,255,255,0.3)\" }}\n        >\n          <div class=\"col-4\" style={{ textAlign: \"center\" }}>\n            <div className=\"container-fluid\" style={{ paddingTop: \"10px\" }}>\n              {this.state.instruction}\n            </div>\n          </div>\n          <div class=\"col-8\">\n            <div className=\"container-fluid\">\n              <br />\n\n              <label htmlFor=\"formControlRange\">Speed:</label>\n              <input\n                type=\"range\"\n                className=\"form-control-range custRange\"\n                id=\"formControlRange\"\n                min=\"0\"\n                max=\"10\"\n                step=\"0.1\"\n                onChange={sliderChange}\n              />\n            </div>\n          </div>\n          <div class=\"col \"></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}